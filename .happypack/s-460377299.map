{"version":3,"sources":["config/utils/envVars.js"],"names":["appRootDir","colors","dotenv","fs","path","userHome","pkg","onlyIf","removeNil","registerEnvFile","CONF_ENV","process","env","envFile","envFileResolutionOrder","resolve","get","name","envFilePath","find","filePath","existsSync","console","log","bgBlue","white","config","string","defaultVal","int","parseInt","bool"],"mappings":"AAAA;;;;;;;;AAQA,OAAOA,UAAP,MAAuB,cAAvB;AACA,OAAOC,MAAP,MAAmB,aAAnB;AACA,OAAOC,MAAP,MAAmB,QAAnB;AACA,OAAOC,EAAP,MAAe,IAAf;AACA,OAAOC,IAAP,MAAiB,MAAjB;AACA,OAAOC,QAAP,MAAqB,WAArB;;AAEA,OAAOC,GAAP,MAAgB,oBAAhB;AACA,OAAOC,MAAP,MAAmB,iCAAnB;AACA,OAAOC,SAAP,MAAsB,qCAAtB;;AAEA;;AAEA,SAASC,eAAT,GAA2B;AACzB,QAAMC,WAAWC,QAAQC,GAAR,CAAYF,QAA7B;AACA,QAAMG,UAAU,MAAhB;;AAEA;AACA;AACA,QAAMC,yBAAyBN,UAAU;AACvC;AACA;AACA;AACAD,SAAOG,QAAP,EAAiBN,KAAKW,OAAL,CAAaf,WAAWgB,GAAX,EAAb,EAAgC,GAAEH,OAAQ,IAAGH,QAAS,EAAtD,CAAjB,CAJuC;AAKvC;AACA;AACAN,OAAKW,OAAL,CAAaf,WAAWgB,GAAX,EAAb,EAA+BH,OAA/B,CAPuC;AAQvC;AACA;AACA;AACAN,SAAOG,QAAP,EAAiBN,KAAKW,OAAL,CAAaV,QAAb,EAAuB,SAAvB,EAAkCC,IAAIW,IAAtC,EAA6C,GAAEJ,OAAQ,IAAGH,QAAS,EAAnE,CAAjB,CAXuC;AAYvC;AACA;AACAN,OAAKW,OAAL,CAAaV,QAAb,EAAuB,SAAvB,EAAkCC,IAAIW,IAAtC,EAA4CJ,OAA5C,CAduC,CAAV,CAA/B;;AAiBA;AACA,QAAMK,cAAcJ,uBAAuBK,IAAvB,CAA4BC,YAAYjB,GAAGkB,UAAH,CAAcD,QAAd,CAAxC,CAApB;;AAEA;AACA,MAAIF,WAAJ,EAAiB;AACfI,YAAQC,GAAR,EAAa;AACXtB,WAAOuB,MAAP,CAAcC,KAAd,CAAqB,+CAA8CP,WAAY,EAA/E,CADF;AAGAhB,WAAOwB,MAAP,CAAc,EAAEtB,MAAMc,WAAR,EAAd;AACD;AACF;;AAED;AACA;AACAT;;AAEA;;AAEA,OAAO,SAASkB,MAAT,CAAgBV,IAAhB,EAAsBW,UAAtB,EAAkC;AACvC,SAAOjB,QAAQC,GAAR,CAAYK,IAAZ,KAAqBW,UAA5B;AACD;;AAED,OAAO,SAASC,GAAT,CAAaZ,IAAb,EAAmBW,UAAnB,EAA+B;AACpC,SAAOjB,QAAQC,GAAR,CAAYK,IAAZ,IACHa,SAASnB,QAAQC,GAAR,CAAYK,IAAZ,CAAT,EAA4B,EAA5B,CADG,GAEHW,UAFJ;AAGD;;AAED,OAAO,SAASG,IAAT,CAAcd,IAAd,EAAoBW,UAApB,EAAgC;AACrC,SAAOjB,QAAQC,GAAR,CAAYK,IAAZ,IACHN,QAAQC,GAAR,CAAYK,IAAZ,MAAsB,MAAtB,IAAgCN,QAAQC,GAAR,CAAYK,IAAZ,MAAsB,GADnD,GAEHW,UAFJ;AAGD","file":"envVars.js","sourceRoot":"/Users/Adam/Dev/listman","sourcesContent":["/**\n * Helper for resolving environment specific configuration.\n *\n * It resolves .env files that are supported by the `dotenv` library.\n *\n * Please read the application configuration docs for more info.\n */\n\nimport appRootDir from 'app-root-dir';\nimport colors from 'colors/safe';\nimport dotenv from 'dotenv';\nimport fs from 'fs';\nimport path from 'path';\nimport userHome from 'user-home';\n\nimport pkg from '../../package.json';\nimport onlyIf from '../../shared/utils/logic/onlyIf';\nimport removeNil from '../../shared/utils/arrays/removeNil';\n\n// PRIVATES\n\nfunction registerEnvFile() {\n  const CONF_ENV = process.env.CONF_ENV;\n  const envFile = '.env';\n\n  // This is the order in which we will try to resolve an environment configuration\n  // file.\n  const envFileResolutionOrder = removeNil([\n    // Is there an environment config file at the app root for our target\n    // environment name?\n    // e.g. /projects/react-universally/.env.development\n    onlyIf(CONF_ENV, path.resolve(appRootDir.get(), `${envFile}.${CONF_ENV}`)),\n    // Is there an environment config file at the app root?\n    // e.g. /projects/react-universally/.env\n    path.resolve(appRootDir.get(), envFile),\n    // Is there an environment config file in the executing user's home dir\n    // that is targetting the specific environment?\n    // e.g. /Users/ctrlplusb/.config/react-universally/.env.development\n    onlyIf(CONF_ENV, path.resolve(userHome, '.config', pkg.name, `${envFile}.${CONF_ENV}`)),\n    // Is there an environment config file in the executing user's home dir?\n    // e.g. /Users/ctrlplusb/.config/react-universally/.env\n    path.resolve(userHome, '.config', pkg.name, envFile),\n  ]);\n\n  // Find the first env file path match.\n  const envFilePath = envFileResolutionOrder.find(filePath => fs.existsSync(filePath));\n\n  // If we found an env file match the register it.\n  if (envFilePath) {\n    console.log( // eslint-disable-line no-console\n      colors.bgBlue.white(`==> Registering environment variables from: ${envFilePath}`),\n    );\n    dotenv.config({ path: envFilePath });\n  }\n}\n\n// Ensure that we first register any environment variables from an existing\n// env file.\nregisterEnvFile();\n\n// EXPORTED HELPERS\n\nexport function string(name, defaultVal) {\n  return process.env[name] || defaultVal;\n}\n\nexport function int(name, defaultVal) {\n  return process.env[name]\n    ? parseInt(process.env[name], 10)\n    : defaultVal;\n}\n\nexport function bool(name, defaultVal) {\n  return process.env[name]\n    ? process.env[name] === 'true' || process.env[name] === '1'\n    : defaultVal;\n}\n"]}