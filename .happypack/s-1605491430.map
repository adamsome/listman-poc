{"version":3,"sources":["server/middleware/reactApplication/index.js"],"names":["React","renderToString","renderToStaticMarkup","ServerRouter","createServerRenderContext","withAsyncComponents","Helmet","getConfig","DemoApp","ServerHTML","reactApplicationMiddleware","request","response","locals","nonce","Error","process","env","NODE_ENV","console","log","html","status","send","reactRouterContext","app","url","then","appWithAsyncComponents","state","STATE_IDENTIFIER","reactAppString","rewind","renderResult","getResult","redirect","setHeader","pathname","end","missed"],"mappings":";;AACA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,cAAT,EAAyBC,oBAAzB,QAAqD,kBAArD;AACA,SAASC,YAAT,EAAuBC,yBAAvB,QAAwD,cAAxD;AACA,SAASC,mBAAT,QAAoC,uBAApC;AACA,OAAOC,MAAP,MAAmB,cAAnB;;AAEA,OAAOC,SAAP,MAAsB,qBAAtB;AACA,OAAOC,OAAP,MAAoB,oCAApB;;AAEA,OAAOC,UAAP,MAAuB,cAAvB;;AAEA;;;AAGA,SAASC,0BAAT,CAAoCC,OAApC,EAA6CC,QAA7C,EAAuD;AACrD;AACA;AACA,MAAI,OAAOA,SAASC,MAAT,CAAgBC,KAAvB,KAAiC,QAArC,EAA+C;AAC7C,UAAM,IAAIC,KAAJ,CAAU,uDAAV,CAAN;AACD;AACD,QAAMD,QAAQF,SAASC,MAAT,CAAgBC,KAA9B;;AAEA;AACA;AACA,MAAIP,UAAU,YAAV,CAAJ,EAA6B;AAC3B,QAAIS,QAAQC,GAAR,CAAYC,QAAZ,KAAyB,aAA7B,EAA4C;AAC1C;AACAC,cAAQC,GAAR,CAAY,sCAAZ;AACD;AACD;AACA;AACA,UAAMC,OAAOnB,qBAAqB,oBAAC,UAAD,IAAY,OAAOY,KAAnB;AAAA;AAAA;AAAA;AAAA;AAAA,MAArB,CAAb;AACAF,aAASU,MAAT,CAAgB,GAAhB,EAAqBC,IAArB,CAA0BF,IAA1B;AACA;AACD;;AAED;AACA;AACA,QAAMG,qBAAqBpB,2BAA3B;;AAEA;AACA,QAAMqB,MACJ;AAAC,gBAAD;AAAA,MAAc,UAAUd,QAAQe,GAAhC,EAAqC,SAASF,kBAA9C;AAAA;AAAA;AAAA;AAAA;AAAA;AACE,wBAAC,OAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADF,GADF;;AAMA;AACA;AACAnB,sBAAoBoB,GAApB,EAAyBE,IAAzB,CAA8B,CAAC,EAAEC,sBAAF,EAA0BC,KAA1B,EAAiCC,gBAAjC,EAAD,KAAyD;AACrF;AACA,UAAMC,iBAAiB9B,eAAe2B,sBAAf,CAAvB;;AAEA;AACA,UAAMP,OAAOnB,qBACX,oBAAC,UAAD;AACE,sBAAgB6B,cADlB;AAEE,aAAOjB,KAFT;AAGE,cAAQR,OAAO0B,MAAP,EAHV;AAIE,uBAAiB,EAAEH,KAAF,EAASC,gBAAT,EAJnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADW,CAAb;;AASA;AACA,UAAMG,eAAeT,mBAAmBU,SAAnB,EAArB;;AAEA;AACA;AACA,QAAID,aAAaE,QAAjB,EAA2B;AACzBvB,eAASU,MAAT,CAAgB,GAAhB,EAAqBc,SAArB,CAA+B,UAA/B,EAA2CH,aAAaE,QAAb,CAAsBE,QAAjE;AACAzB,eAAS0B,GAAT;AACA;AACD;;AAED1B,aACGU,MADH,CAEIW,aAAaM;AACX;AACA;AAFF,MAGI;AACF;AAJF,MAKI,GAPR,EASGhB,IATH,CASS,kBAAiBF,IAAK,EAT/B;AAUD,GAnCD;AAoCD;;AAED,eAAeX,0BAAf","file":"index.js","sourceRoot":"/Users/Adam/Dev/listman","sourcesContent":["\nimport React from 'react';\nimport { renderToString, renderToStaticMarkup } from 'react-dom/server';\nimport { ServerRouter, createServerRenderContext } from 'react-router';\nimport { withAsyncComponents } from 'react-async-component';\nimport Helmet from 'react-helmet';\n\nimport getConfig from '../../../config/get';\nimport DemoApp from '../../../shared/components/DemoApp';\n\nimport ServerHTML from './ServerHTML';\n\n/**\n * React application middleware, supports server side rendering.\n */\nfunction reactApplicationMiddleware(request, response) {\n  // We should have had a nonce provided to us.  See the server/index.js for\n  // more information on what this is.\n  if (typeof response.locals.nonce !== 'string') {\n    throw new Error('A \"nonce\" value has not been attached to the response');\n  }\n  const nonce = response.locals.nonce;\n\n  // It's possible to disable SSR, which can be useful in development mode.\n  // In this case traditional client side only rendering will occur.\n  if (getConfig('disableSSR')) {\n    if (process.env.NODE_ENV === 'development') {\n      // eslint-disable-next-line no-console\n      console.log('==> Handling react route without SSR');\n    }\n    // SSR is disabled so we will just return an empty html page and will\n    // rely on the client to initialize and render the react application.\n    const html = renderToStaticMarkup(<ServerHTML nonce={nonce} />);\n    response.status(200).send(html);\n    return;\n  }\n\n  // First create a context for <ServerRouter>, which will allow us to\n  // query for the results of the render.\n  const reactRouterContext = createServerRenderContext();\n\n  // Create our React application.\n  const app = (\n    <ServerRouter location={request.url} context={reactRouterContext}>\n      <DemoApp />\n    </ServerRouter>\n  );\n\n  // Wrap our app with react-async-component helper so that our async components\n  // will be resolved and rendered with the response.\n  withAsyncComponents(app).then(({ appWithAsyncComponents, state, STATE_IDENTIFIER }) => {\n    // Render the app to a string.\n    const reactAppString = renderToString(appWithAsyncComponents);\n\n    // Generate the html response.\n    const html = renderToStaticMarkup(\n      <ServerHTML\n        reactAppString={reactAppString}\n        nonce={nonce}\n        helmet={Helmet.rewind()}\n        asyncComponents={{ state, STATE_IDENTIFIER }}\n      />,\n    );\n\n    // Get the render result from the server render context.\n    const renderResult = reactRouterContext.getResult();\n\n    // Check if the render result contains a redirect, if so we need to set\n    // the specific status and redirect header and end the response.\n    if (renderResult.redirect) {\n      response.status(301).setHeader('Location', renderResult.redirect.pathname);\n      response.end();\n      return;\n    }\n\n    response\n      .status(\n        renderResult.missed\n          // If the renderResult contains a \"missed\" match then we set a 404 code.\n          // Our App component will handle the rendering of an Error404 view.\n          ? 404\n          // Otherwise everything is all good and we send a 200 OK status.\n          : 200,\n      )\n      .send(`<!DOCTYPE html>${html}`);\n  });\n}\n\nexport default reactApplicationMiddleware;\n"]}