{"version":3,"sources":["server/middleware/offlinePage.js"],"names":["readFile","resolve","pathResolve","appRootDir","getConfig","offlinePageMiddleware","req","res","next","locals","nonce","Error","get","err","data","status","send","withNonce","replace"],"mappings":"AAAA;;AAEA,SAASA,QAAT,QAAyB,IAAzB;AACA,SAASC,WAAWC,WAApB,QAAuC,MAAvC;AACA,OAAOC,UAAP,MAAuB,cAAvB;AACA,OAAOC,SAAP,MAAsB,kBAAtB;;AAEA;;;;;AAKA,eAAe,SAASC,qBAAT,CAA+BC,GAA/B,EAAoCC,GAApC,EAAyCC,IAAzC,EAA+C;AAC5D;AACA;AACA,MAAI,OAAOD,IAAIE,MAAJ,CAAWC,KAAlB,KAA4B,QAAhC,EAA0C;AACxC,UAAM,IAAIC,KAAJ,CAAU,uDAAV,CAAN;AACD;AACD,QAAMD,QAAQH,IAAIE,MAAJ,CAAWC,KAAzB;AACAV,WACEE,YACEC,WAAWS,GAAX,EADF,EAEER,UAAU,2BAAV,CAFF,EAGEA,UAAU,mCAAV,CAHF,CADF,EAME,OANF,EAOE,CAACS,GAAD,EAAMC,IAAN,KAAe;AACb,QAAID,GAAJ,EAAS;AACPN,UAAIQ,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,+BAArB;AACA;AACD;AACD,UAAMC,YAAYH,KAAKI,OAAL,CAAa,mBAAb,EAAkCR,KAAlC,CAAlB;AACAH,QAAIS,IAAJ,CAASC,SAAT;AACD,GAdH;AAgBD","file":"offlinePage.js","sourceRoot":"/Users/Adam/Dev/listman","sourcesContent":["/* eslint-disable no-unused-vars */\n\nimport { readFile } from 'fs';\nimport { resolve as pathResolve } from 'path';\nimport appRootDir from 'app-root-dir';\nimport getConfig from '../../config/get';\n\n/**\n * We need a middleware to intercept calls to our offline page to ensure that\n * inline scripts get the correct nonce value injected into them.  Otherwise\n * we can't provide client config values to the offline page.\n */\nexport default function offlinePageMiddleware(req, res, next) {\n  // We should have had a nonce provided to us.  See the server/index.js for\n  // more information on what this is.\n  if (typeof res.locals.nonce !== 'string') {\n    throw new Error('A \"nonce\" value has not been attached to the response');\n  }\n  const nonce = res.locals.nonce;\n  readFile(\n    pathResolve(\n      appRootDir.get(),\n      getConfig('bundles.client.outputPath'),\n      getConfig('serviceWorker.offlinePageFileName'),\n    ),\n    'utf-8',\n    (err, data) => {\n      if (err) {\n        res.status(500).send('Error returning offline page.');\n        return;\n      }\n      const withNonce = data.replace('NONCE_PLACEHOLDER', nonce);\n      res.send(withNonce);\n    },\n  );\n}\n"]}