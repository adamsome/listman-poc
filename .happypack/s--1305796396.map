{"version":3,"sources":["server/index.js"],"names":["express","compression","resolve","pathResolve","appRootDir","reactApplication","security","clientBundle","serviceWorker","offlinePage","errorHandlers","getConfig","app","disable","use","process","env","NODE_ENV","get","static","listener","listen","console","log"],"mappings":"AAAA;;AAEA,OAAOA,OAAP,MAAoB,SAApB;AACA,OAAOC,WAAP,MAAwB,aAAxB;AACA,SAASC,WAAWC,WAApB,QAAuC,MAAvC;AACA,OAAOC,UAAP,MAAuB,cAAvB;AACA,OAAOC,gBAAP,MAA6B,+BAA7B;AACA,OAAOC,QAAP,MAAqB,uBAArB;AACA,OAAOC,YAAP,MAAyB,2BAAzB;AACA,OAAOC,aAAP,MAA0B,4BAA1B;AACA,OAAOC,WAAP,MAAwB,0BAAxB;AACA,OAAOC,aAAP,MAA0B,4BAA1B;AACA,OAAOC,SAAP,MAAsB,eAAtB;;AAEA;AACA,MAAMC,MAAMZ,SAAZ;;AAEA;AACAY,IAAIC,OAAJ,CAAY,cAAZ;;AAEA;AACAD,IAAIE,GAAJ,CAAQ,GAAGR,QAAX;;AAEA;AACAM,IAAIE,GAAJ,CAAQb,aAAR;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,IAAIc,QAAQC,GAAR,CAAYC,QAAZ,KAAyB,aAAzB,IAA0CN,UAAU,uBAAV,CAA9C,EAAkF;AAChFC,MAAIM,GAAJ,CAAS,IAAGP,UAAU,wBAAV,CAAoC,EAAhD,EAAmDH,aAAnD;AACAI,MAAIM,GAAJ,CACG,GAAEP,UAAU,wBAAV,CAAoC,GAAEA,UAAU,mCAAV,CAA+C,EAD1F,EAEEF,WAFF;AAID;;AAED;AACAG,IAAIE,GAAJ,CAAQH,UAAU,wBAAV,CAAR,EAA6CJ,YAA7C;;AAEA;AACA;AACAK,IAAIE,GAAJ,CAAQd,QAAQmB,MAAR,CAAehB,YAAYC,WAAWc,GAAX,EAAZ,EAA8BP,UAAU,kBAAV,CAA9B,CAAf,CAAR;;AAEA;AACAC,IAAIM,GAAJ,CAAQ,GAAR,EAAab,gBAAb;;AAEA;AACAO,IAAIE,GAAJ,CAAQ,GAAGJ,aAAX;;AAEA;AACA,MAAMU,WAAWR,IAAIS,MAAJ,CAAWV,UAAU,MAAV,CAAX,EAA8BA,UAAU,MAAV,CAA9B,EAAiD,MAChEW,QAAQC,GAAR,CAAa,4BAA2BZ,UAAU,MAAV,CAAkB,EAA1D,CADe,CAAjB;;AAIA;AACA;AACA,eAAeS,QAAf","file":"index.js","sourceRoot":"/Users/Adam/Dev/listman","sourcesContent":["/* eslint-disable no-console */\n\nimport express from 'express';\nimport compression from 'compression';\nimport { resolve as pathResolve } from 'path';\nimport appRootDir from 'app-root-dir';\nimport reactApplication from './middleware/reactApplication';\nimport security from './middleware/security';\nimport clientBundle from './middleware/clientBundle';\nimport serviceWorker from './middleware/serviceWorker';\nimport offlinePage from './middleware/offlinePage';\nimport errorHandlers from './middleware/errorHandlers';\nimport getConfig from '../config/get';\n\n// Create our express based server.\nconst app = express();\n\n// Don't expose any software information to potential hackers.\napp.disable('x-powered-by');\n\n// Security middlewares.\napp.use(...security);\n\n// Gzip compress the responses.\napp.use(compression());\n\n// Register our service worker which was generated by the offline-plugin\n// webpack plugin. See the webpack plugins section for more information.\n// Note: the service worker needs to be served from the http root of your\n// application for it to work correctly.\n// We only want the service worker registered for production builds and if\n// the config enables it.\nif (process.env.NODE_ENV !== 'development' && getConfig('serviceWorker.enabled')) {\n  app.get(`/${getConfig('serviceWorker.fileName')}`, serviceWorker);\n  app.get(\n    `${getConfig('bundles.client.webPath')}${getConfig('serviceWorker.offlinePageFileName')}`,\n    offlinePage,\n  );\n}\n\n// Configure serving of our client bundle.\napp.use(getConfig('bundles.client.webPath'), clientBundle);\n\n// Configure static serving of our \"public\" root http path static files.\n// Note: these will be served off the root (i.e. '/') of our application.\napp.use(express.static(pathResolve(appRootDir.get(), getConfig('publicAssetsPath'))));\n\n// The React application middleware.\napp.get('*', reactApplication);\n\n// Error Handler middlewares.\napp.use(...errorHandlers);\n\n// Create an http listener for our express app.\nconst listener = app.listen(getConfig('port'), getConfig('host'), () =>\n  console.log(`Server listening on port ${getConfig('port')}`),\n);\n\n// We export the listener as it will be handy for our development hot reloader,\n// or for exposing a general extension layer for application customisations.\nexport default listener;\n"]}