diff --git a/app/containers/App/index.js b/app/containers/App/index.js
index 24db24d..a249c91 100644
--- a/app/containers/App/index.js
+++ b/app/containers/App/index.js
@@ -1,6 +1,6 @@
 import React from 'react'
 
-import './App.css'
+//import './App.css'
 import List from '../List'
 
 export default class App extends React.Component {
diff --git a/config/env.js b/config/env.js
index 5d0ab7b..b8498d2 100644
--- a/config/env.js
+++ b/config/env.js
@@ -1,28 +1,8 @@
-// Grab NODE_ENV and REACT_APP_* environment variables and prepare them to be
-// injected into the application via DefinePlugin in Webpack configuration.
+const setEnvDefault = (key, val) => {
+  if (!process.env[key]) process.env[key] = val;
+};
 
-var REACT_APP = /^REACT_APP_/i;
+setEnvDefault('NODE_ENV', 'development');
+setEnvDefault('PORT', 3000);
 
-function getClientEnvironment(publicUrl) {
-  var processEnv = Object
-    .keys(process.env)
-    .filter(key => REACT_APP.test(key))
-    .reduce((env, key) => {
-      env[key] = JSON.stringify(process.env[key]);
-      return env;
-    }, {
-      // Useful for determining whether weâ€™re running in production mode.
-      // Most importantly, it switches React into the correct mode.
-      'NODE_ENV': JSON.stringify(
-        process.env.NODE_ENV || 'development'
-      ),
-      // Useful for resolving the correct path to static assets in `public`.
-      // For example, <img src={process.env.PUBLIC_URL + '/img/logo.png'} />.
-      // This should only be used as an escape hatch. Normally you would put
-      // images into the `src` and `import` them in code to get their paths.
-      'PUBLIC_URL': JSON.stringify(publicUrl)
-    });
-  return {'process.env': processEnv};
-}
-
-module.exports = getClientEnvironment;
+module.exports = setEnvDefault;
diff --git a/config/webpack.base.config.js b/config/webpack.base.config.js
index d0d9801..b86a33f 100644
--- a/config/webpack.base.config.js
+++ b/config/webpack.base.config.js
@@ -1,15 +1,18 @@
-const path = require('path');
 const webpack = require('webpack');
 const autoprefixer = require('autoprefixer');
+const ExtractTextPlugin = require('extract-text-webpack-plugin');
 const InterpolateHtmlPlugin = require('react-dev-utils/InterpolateHtmlPlugin');
-const getClientEnvironment = require('./env');
 
+const setEnvDefault = require('./env');
+const paths = require('./paths');
+
+const publicPath = '/';
 // `publicUrl` is just like `publicPath`, but we will provide it to our app
 // as %PUBLIC_URL% in `index.html` and `process.env.PUBLIC_URL` in JavaScript.
 // Omit trailing slash as %PUBLIC_PATH%/xyz looks better than %PUBLIC_PATH%xyz.
 const publicUrl = '';
 // Get environment variables to inject into our app.
-const env = getClientEnvironment(publicUrl);
+setEnvDefault('PUBLIC_URL', publicUrl);
 
 // This is the baseline configuration.
 // Called by the dev and prod configurations to get baseline defaults.
@@ -19,9 +22,9 @@ module.exports = (options) => ({
 
   // Merge with environment-specific settings
   output: Object.assign({
-    path: path.resolve(process.cwd(), 'build'),
+    path: paths.BUILD,
     // URL that app is served from ('/' in dev for ease of use)
-    publicPath: '/',
+    publicPath: publicPath,
   }, options.output),
 
   module: {
@@ -31,7 +34,7 @@ module.exports = (options) => ({
       {
         test: /\.(js|jsx)$/,
         loader: 'eslint',
-        include: path.resolve(process.cwd(), 'app'),
+        include: paths.APP,
       }
     ],
     loaders: [
@@ -71,6 +74,10 @@ module.exports = (options) => ({
         exclude: /node_modules/,
         query: options.babelQuery,
       },
+      {
+        test: /\.css$/,
+        loader: ExtractTextPlugin.extract('style', 'css?importLoaders=1!postcss'),
+      },
       // Optimate web images
       {
         test: /\.(jpg|png|gif)$/,
@@ -93,9 +100,7 @@ module.exports = (options) => ({
           name: 'static/media/[name].[hash:8].[ext]'
         }
       }
-    ].concat(options.styleLoaders),
-    // TODO: test w/ ExtractTextPlugin in DEV
-    // Add the environment-specific style (CSS) loaders
+    ],
   },
   // We use PostCSS for autoprefixing only.
   postcss: function() {
@@ -111,6 +116,8 @@ module.exports = (options) => ({
     ];
   },
   plugins: options.plugins.concat([
+    new ExtractTextPlugin('[name].css'),
+    // Consolidate vendor JS libraries into its own JS file
     new webpack.optimize.CommonsChunkPlugin({
       name: 'vendor',
       children: true,
@@ -129,7 +136,12 @@ module.exports = (options) => ({
     }),
     // Makes some environment variables available to the JS code, for example:
     // if (process.env.NODE_ENV === 'development') { ... }. See `./env.js`.
-    new webpack.DefinePlugin(env),
+    new webpack.DefinePlugin({
+      'process.env': {
+        PORT: JSON.stringify(process.env.PORT),
+        NODE_ENV: JSON.stringify(process.env.NODE_ENV),
+      },
+    }),
     new webpack.NamedModulesPlugin(),
   ]),
 
diff --git a/config/webpack.dev.config.js b/config/webpack.dev.config.js
index bb92636..019e5e3 100644
--- a/config/webpack.dev.config.js
+++ b/config/webpack.dev.config.js
@@ -1,10 +1,10 @@
 const webpack = require('webpack');
-const path = require('path');
-const fs = require('fs');
 const HtmlWebpackPlugin = require('html-webpack-plugin');
 const WatchMissingNodeModulesPlugin = require('react-dev-utils/WatchMissingNodeModulesPlugin');
 const CaseSensitivePathsPlugin = require('case-sensitive-paths-webpack-plugin');
 
+const paths = require('./paths');
+
 // This is the development configuration.
 // It is focused on developer experience and fast rebuilds.
 module.exports = require('./webpack.base.config')({
@@ -16,7 +16,7 @@ module.exports = require('./webpack.base.config')({
     // Default polyfills
     'babel-polyfill',
     // Finally, this is your app's code:
-    path.join(process.cwd(), 'app/index.js'),
+    paths.APP_INDEX,
     // We include the app code last so that if there is a runtime
     // error during initialization, it doesn't blow up the client, and
     // changing JS code would still trigger a refresh.
@@ -30,16 +30,11 @@ module.exports = require('./webpack.base.config')({
     // Add /* filename */ comments to generated require()s in the output.
     pathinfo: true,
   },
-  // The style/CSS loaders are different in dev vs. prod.
-  styleLoaders: [{
-    test: /\.css$/,
-    loader: 'style!css?importLoaders=1!postcss'
-  }],
   // Load the dependency handler plugins and default plugins
   plugins: [
     // Generates an `index.html` file with the <script> injected.
     new HtmlWebpackPlugin({
-      template: 'app/index.html',
+      template: paths.HTML,
       inject: true,
     }),
     // This is necessary to emit hot updates.
@@ -63,5 +58,5 @@ module.exports = require('./webpack.base.config')({
   },
   // You may want 'eval' instead if you prefer to see the compiled output in DevTools.
   // See the discussion in https://github.com/facebookincubator/create-react-app/issues/343.
-  devtool: 'cheap-module-source-map',
+  devtool: 'cheap-module-eval-source-map',
 });
diff --git a/package.json b/package.json
index b7079ac..d83d180 100644
--- a/package.json
+++ b/package.json
@@ -10,12 +10,14 @@
   "scripts": {
     "build": "./node_modules/.bin/webpack",
     "start": "cross-env NODE_ENV=development node server",
-    "test": "node scripts/test.js --env=jsdom"
+    "start:dev": "babel-node scripts/start.dev",
+    "test": "node scripts/test --env=jsdom"
   },
   "author": "Adam Some",
   "license": "MIT",
   "devDependencies": {
     "autoprefixer": "^6.6.1",
+    "babel-cli": "^6.18.0",
     "babel-core": "^6.21.0",
     "babel-eslint": "^7.1.1",
     "babel-jest": "^18.0.0",
@@ -37,6 +39,7 @@
     "eslint-plugin-jsx-a11y": "^2.2.3",
     "eslint-plugin-react": "^6.4.1",
     "exports-loader": "^0.6.3",
+    "extract-text-webpack-plugin": "^1.0.1",
     "file-loader": "^0.9.0",
     "html-webpack-plugin": "^2.26.0",
     "jest": "^17.0.3",
@@ -52,10 +55,12 @@
   },
   "dependencies": {
     "chalk": "^1.1.3",
+    "connect-slashes": "^1.3.1",
     "cross-env": "^3.1.4",
     "express": "^4.14.0",
     "react": "^15.4.2",
     "react-dom": "^15.4.2",
+    "react-router": "^3.0.1",
     "whatwg-fetch": "^2.0.1"
   },
   "jest": {
diff --git a/server/frontendMiddleware.js b/server/frontendMiddleware.js
deleted file mode 100644
index 555bd51..0000000
--- a/server/frontendMiddleware.js
+++ /dev/null
@@ -1,67 +0,0 @@
-const path = require('path');
-const chalk = require('chalk');
-const checkRequiredFiles = require('react-dev-utils/checkRequiredFiles');
-const clearConsole = require('react-dev-utils/clearConsole');
-const openBrowser = require('react-dev-utils/openBrowser');
-
-const addFrontendMiddleware = (app, cfg) => {
-  // Warn and crash if required files are missing
-  if (!checkRequiredFiles([path.resolve(process.cwd(), 'app/index.html'),
-                           path.resolve(process.cwd(), 'app/index.js')])) {
-    process.exit(1);
-  }
-
-  // TODO: This is for DEV env, implement PROD
-  const webpack = require('webpack');
-  const webpackDevMiddleware = require('webpack-dev-middleware');
-  const webpackHotMiddleware = require('webpack-hot-middleware');
-  const webpackConfig = require('../config/webpack.dev.config.js');
-
-  const compiler = webpack(webpackConfig);
-
-  // Improves webpack dev server console messaging
-  const addConsoleMiddleware = require('./webpackDevConsoleMiddleware');
-  addConsoleMiddleware(compiler, cfg);
-
-  const webpackDevMiddlewareInstance = webpackDevMiddleware(compiler, {
-    // Use the same public path as the webpack config
-    publicPath: webpackConfig.output.publicPath,
-    // Only display warnings and errors to the console
-    noInfo: true,
-    silent: true,
-    quiet: true,
-    stats: 'errors-only',
-  });
-
-  app.use(webpackDevMiddlewareInstance);
-  app.use(webpackHotMiddleware(compiler));
-
-  // Since webpackDevMiddleware uses memory-fs internally to store build
-  // artifacts, we use it instead
-  const fs = webpackDevMiddlewareInstance.fileSystem;
-
-  app.get('*', (req, res) => {
-    fs.readFile(path.join(compiler.outputPath, 'index.html'), (err, file) => {
-      if (err) {
-        res.sendStatus(404);
-      } else {
-        res.send(file.toString());
-      }
-    });
-  });
-
-  return () => {
-    if (cfg.isInteractive) {
-      clearConsole();
-    }
-    const envStr = cfg.isDev ? "development" : "production";
-    console.log(chalk.cyan('Starting the ' + envStr + ' server...'));
-    console.log();
-
-    if (cfg.isInteractive) {
-      openBrowser(cfg.protocol + '://' + cfg.host + ':' + cfg.port + '/');
-    }
-  };
-};
-
-module.exports = addFrontendMiddleware;
diff --git a/server/index.js b/server/index.js
index 329c5fa..593e84d 100644
--- a/server/index.js
+++ b/server/index.js
@@ -1,37 +1,74 @@
 /* exlint consistent-return:0 */
-const path = require('path');
-const express = require('express');
+import React from 'react'
+import { renderToString } from 'react-dom/server'
+import express from 'express'
+import slashes from 'connect-slashes'
 
-const addFrontendMiddleWare = require('./frontendMiddleware');
+import router from './router'
+import { BUILD, PUBLIC } from '../config/paths'
+import Error500 from './templates/Error500'
 
-const port = process.env.PORT || 3000;
+const PORT = process.env.PORT;
+const oneDay = 1000 * 60 * 60 * 24;
 
-const app = express();
+// TODO: Implement PROD server
+const app = express()
 
-// If you need a backend, e.g. an API, add your custom
-// backend-specific middleware here
-// app.use('/api', myApi);
+app.set('etag', true)
+app.use((req, res, next) => {
+  res.header('Cache-Control', 'no-cache, no-store, must-revalidate')
+  res.header('Pragma', 'no-cache')
+  res.header('Expires', 0)
+  next()
+})
+// TODO: Add compression
+//app.use(compression())
+app.enable('view cache')
+app.enable('strict routing')
+
+// Add custom React render functions to the express response object
+Object.assign(express.response, {
+  renderPageToString(page) {
+    return `<!doctype html>${renderToString(page)}`
+  },
+  render500(e) {
+    console.log('render-500', e)
+    this.status(500).send(this.renderPageToString(<Error500 />))
+  },
+})
+
+// Render the Error500 page on any errors
+app.use((err, req, res, next) => (err) ? res.render500(err) : next())
+
+// Serve static assets from the public and compiled build dirs
+app.use('/', express.static(BUILD, { maxAge: oneDay }))
+app.use('/', express.static(PUBLIC, { maxAge: oneDay }))
+
+// TODO: Implement API router
+//app.use('/api', apiRouter)
+
+// Ensure '/' is appended to requests to ensure routing consistency,
+// e.g. /users => /users/
+app.use(slashes())
+
+//app.get('*', setRouterContext, renderApp(assets))
 
 // Add the frontend middleware
-const onListenCallback = addFrontendMiddleWare(app, {
-  outputPath:    path.resolve(process.cwd(), 'build'),
-  publicPath:    '/',
-  protocol:      process.env.HTTPS === 'true' ? "https" : "http",
-  port:          port,
-  host:          process.env.HOST || 'localhost',
-  isDev:         process.env.NODE_ENV !== 'production',
-  isInteractive: process.stdout.isTTY,
-});
+const onListenCallback = router(app)
 
+// TODO: Should return/export the express app, not launch itself
+// TODO: Detect port conflicts (see CRA)
 // Start the server
-app.listen(port, (err) => {
+app.listen(PORT, (err) => {
   if (err) {
-    return console.log(err.message);
+    return console.log(err.message)
   }
 
   if (onListenCallback) {
-    onListenCallback();
+    onListenCallback()
   } else {
-    console.log("Server started on port: " + port);
+    console.log("Server started on port: " + PORT)
   }
-});
+})
+
+export default app
diff --git a/server/webpackDevConsoleMiddleware.js b/server/webpackDevConsoleMiddleware.js
index 6155930..769e705 100644
--- a/server/webpackDevConsoleMiddleware.js
+++ b/server/webpackDevConsoleMiddleware.js
@@ -1,14 +1,21 @@
-const chalk = require('chalk');
-const formatWebpackMessages = require('react-dev-utils/formatWebpackMessages');
-const clearConsole = require('react-dev-utils/clearConsole');
+import chalk from 'chalk'
+import webpack from 'webpack'
+import webpackDevMiddleware from 'webpack-dev-middleware'
+import webpackHotMiddleware from 'webpack-hot-middleware'
+import formatWebpackMessages from 'react-dev-utils/formatWebpackMessages'
+import clearConsole from 'react-dev-utils/clearConsole'
 
-const addConsoleMiddleware = (compiler, cfg) => {
+const isTTY = process.stdout.isTTY
+const protocol = process.env.HTTPS === 'true' ? "https" : "http"
+const host = process.env.HOST || 'localhost'
+
+function addCustomCompilerMessages(compiler) {
   // "invalid" event fires when you have changed a file, and Webpack is
   // recompiling a bundle. WebpackDevServer takes care to pause serving the
   // bundle, so if you refresh, it'll wait instead of serving the old one.
   // "invalid" is short for "bundle invalidated", it doesn't imply any errors.
   compiler.plugin('invalid', function() {
-    if (cfg.isInteractive) {
+    if (isTTY) {
       clearConsole();
     }
     console.log('Compiling...');
@@ -19,7 +26,7 @@ const addConsoleMiddleware = (compiler, cfg) => {
   // "done" event fires when Webpack has finished recompiling the bundle.
   // Whether or not you have warnings or errors, you will get this event.
   compiler.plugin('done', function(stats) {
-    if (cfg.isInteractive) {
+    if (isTTY) {
       clearConsole();
     }
 
@@ -29,7 +36,7 @@ const addConsoleMiddleware = (compiler, cfg) => {
     var messages = formatWebpackMessages(stats.toJson({}, true));
     var isSuccessful = !messages.errors.length && !messages.warnings.length;
     var showInstructions = isSuccessful &&
-                           (cfg.isInteractive || isFirstCompile);
+                           (isTTY || isFirstCompile);
 
     if (isSuccessful) {
       console.log(chalk.green('Compiled successfully!'));
@@ -39,14 +46,17 @@ const addConsoleMiddleware = (compiler, cfg) => {
       console.log();
       console.log('The app is running at:');
       console.log();
-      console.log('  ' + chalk.cyan(cfg.protocol + '://' +
-                                    cfg.host + ':' +
-                                    cfg.port + '/'));
-      console.log();
-      console.log('Note that the development build is not optimized.');
-      console.log('To create a production build, use ' +
-                  chalk.cyan('npm run build') + '.');
+      console.log('  ' + chalk.cyan(protocol + '://' +
+                                    host + ':' +
+                                    process.env.PORT + '/'));
       console.log();
+
+      if (process.env.NODE_ENV !== 'production') {
+        console.log('Note that the development build is not optimized.');
+        console.log('To create a production build, use ' +
+                    chalk.cyan('npm run build') + '.');
+        console.log();
+      }
       isFirstCompile = false;
     }
 
@@ -77,4 +87,35 @@ const addConsoleMiddleware = (compiler, cfg) => {
   });
 }
 
-module.exports = addConsoleMiddleware;
+const createWebpackCompiler = (config) => {
+  // "Compiler" is a low-level interface to Webpack.
+  // It lets us listen to some events and provide our own custom messages.
+  const compiler = webpack(config)
+  addCustomCompilerMessages(compiler)
+  return compiler
+}
+
+// TODO: TEMP REMOVE FS
+let memFS
+let outputPath
+const createWebpackMiddlewares = (config, compiler) => {
+  if (!compiler) compiler = createWebpackCompiler(config)
+  let middlewares = []
+  middlewares.push(webpackDevMiddleware(compiler, {
+    // Use the same public path as the webpack config
+    publicPath: config.output.publicPath,
+    // Only display warnings and errors to the console
+    noInfo: true,
+    silent: true,
+    quiet: true,
+    stats: 'errors-only',
+  }))
+  middlewares.push(webpackHotMiddleware(compiler))
+  // TODO: TEMP REMOVE FS
+  memFS = middlewares[0].fileSystem
+  outputPath = compiler.outputPath
+  return middlewares
+}
+
+// TODO: TEMP REMOVE FS
+export { createWebpackMiddlewares, createWebpackCompiler, memFS, outputPath }
